{{- define "icinga2.config" -}}
// Constants for Icinga 2 from constants.conf
const PluginDir = "/usr/lib/nagios/plugins"
const ManubulonPluginDir = "/usr/lib/nagios/plugins"
const PluginContribDir = "/usr/lib/nagios/plugins"
const NodeName = getenv("ICINGA_CN")
const ZoneName = {{ .Values.config.zone_name | quote }}
const TicketSalt = getenv("ICINGA_TICKET_SALT")

// Standard imports from icinga2.conf
include <itl>
include <plugins>
include <plugins-contrib>
include <manubulon>
include <windows-plugins>
include <nscp>
include "features-enabled/*.conf"
{{- if .Values.features.api.enabled }}
include "api-users.conf"
{{- end }}

{{ $all_endpoints := list -}}
{{- if .Values.config.create_endpoints -}}
// Define endpoints in our own zone (autogenerated)
{{- range $i := until (.Values.replicas | int) }}
{{- $node_name := printf "%s-%d" (include "icinga2.fullname" $) $i }}
{{- $all_endpoints = append $all_endpoints $node_name -}}
{{- $service_name := printf "%s-%d" (include "icinga2.fullname" $) $i }}
object Endpoint {{ $node_name | quote }} {
    host = {{ $service_name | quote }}
    port = {{ $.Values.service.port }}
}
{{- end }}
object Zone ZoneName {
    endpoints = {{ toJson $all_endpoints }}
}
{{- end }}

// Define all custom endpoints
{{- range $endpoint := .Values.config.endpoints | default list }}
{{- if not (has $endpoint.name $all_endpoints) }}
object Endpoint {{ $endpoint.name | quote }} {
    {{- if $endpoint.host }}
    host = {{ $endpoint.host | quote }}
    {{- end }}
    {{- if $endpoint.port }}
    port = {{ $endpoint.port }}
    {{- end }}
    {{- if $endpoint.log_duration }}
    log_duration = {{ $endpoint.log_duration | quote }}
    {{- end }}
}
{{- end }}
{{- end }}

// Define all custom endpoints
{{- range $zone := .Values.config.zones | default list }}
object Zone {{ $zone.name | quote }} {
    {{- if $zone.endpoints }}
    endpoints = {{ toJson $zone.endpoints }}
    {{- end }}
    {{- if $zone.parent }}
    parent = {{ $zone.parent | quote }}
    {{- end }}
    {{ if $zone.global | default false -}}
    global = true
    {{- else -}}
    global = false
    {{- end }}
}
{{- end }}

object Zone "global-templates" {
    global = true
}

object Zone "director-global" {
    global = true
}
{{- end -}}
